import re

def password_strength_checker(password):
    # Initialize score and feedback
    score = 0
    feedback = []

    # Length
    if len(password) >= 12:
        score += 5
        feedback.append("Excellent length (12+ characters)")
    elif len(password) >= 10:
        score += 4
        feedback.append("Good length (10-11 characters)")
    elif len(password) >= 8:
        score += 3
        feedback.append("Fair length (8-9 characters)")
    else:
        score += 1
        feedback.append("Too short (less than 8 characters)")

    # Complexity
    complexity_regex = r'^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[^A-Za-z0-9])'
    if re.search(complexity_regex, password):
        score += 5
        feedback.append("Excellent complexity (uppercase, lowercase, digit, and special character)")
    elif re.search(r'[A-Z]', password) and re.search(r'[a-z]', password) and re.search(r'\d', password):
        score += 4
        feedback.append("Good complexity (uppercase, lowercase, and digit)")
    else:
        missing_chars = []
        if not re.search(r'[A-Z]', password):
            missing_chars.append("uppercase")
        if not re.search(r'[a-z]', password):
            missing_chars.append("lowercase")
        if not re.search(r'\d', password):
            missing_chars.append("digit")
        if not re.search(r'[^A-Za-z0-9]', password):
            missing_chars.append("special character")
        feedback.append(f"Improve complexity (add {', '.join(missing_chars)})")

    # Uniqueness
    char_counts = {}
    for char in password:
        char_counts[char] = char_counts.get(char, 0) + 1
    repeated_chars = [char for char, count in char_counts.items() if count > 1]
    if not repeated_chars:
        score += 3
        feedback.append("Good uniqueness (no repeated characters)")
    else:
        feedback.append(f"Improve uniqueness (reduce repeated characters: {', '.join(repeated_chars)})")

    # Determine strength
    if score >= 12:
        strength = "Strong"
    elif score >= 9:
        strength = "Medium"
    else:
        strength = "Weak"

    return strength, feedback

# Example usage
password = input("Enter your password: ")
if isinstance(password, str) and password:  # Check for empty or non-string inputs
    strength, feedback = password_strength_checker(password)
    print(f"Password Strength: {strength}")
    print("Feedback:")
    for item in feedback:
        print(f"- {item}")
else:
    print("Please enter a valid password")
